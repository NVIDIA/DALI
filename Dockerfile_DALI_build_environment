# From the directory containing the Dockerfile
# docker build -t dali-build:cuda12.6 -f Dockerfile_DALI_build_environment .

# # on your host
# mkdir -p ~/DALI ~/dali-out

# docker run --rm -it --gpus all \
#   -v ~/DALI:/workspace/DALI \
#   -v ~/dali-out:/out \
#   dali-build:cuda12.6 bash

# inside container:
# bash DALI/build_docker_dali.sh

# CUDA 12.6 devel on Ubuntu 22.04 (Jammy)
FROM nvidia/cuda:12.6.2-devel-ubuntu22.04
ENV DEBIAN_FRONTEND=noninteractive

# Base deps + multimedia libs (removed libtar-dev - will build from source)
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential ninja-build pkg-config autotools-dev autoconf automake libtool \
    git git-lfs ca-certificates curl wget gnupg software-properties-common \
    python3 python3-dev python3-pip python3-venv python-is-python3 \
    libjpeg-turbo8-dev libtiff-dev liblmdb-dev libsndfile1-dev \
    libcfitsio-dev \
    libavformat-dev libavcodec-dev libavfilter-dev libavutil-dev libswscale-dev \
    libopencv-dev \
    && rm -rf /var/lib/apt/lists/*

# Newer CMake
RUN curl -fsSL https://apt.kitware.com/keys/kitware-archive-latest.asc \
    | gpg --dearmor -o /etc/apt/trusted.gpg.d/kitware.gpg \
    && apt-add-repository 'deb https://apt.kitware.com/ubuntu/ jammy main' \
    && apt-get update && apt-get install -y --no-install-recommends cmake \
    && rm -rf /var/lib/apt/lists/*

# ---- LLVM/Clang 16 (latest stable for Ubuntu 22.04) ----
RUN wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc \
    && echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main" > /etc/apt/sources.list.d/llvm.list \
    && apt-get update && apt-get install -y --no-install-recommends \
    clang-16 llvm-16 llvm-16-dev libclang1-16 libclang-16-dev \
    && rm -rf /var/lib/apt/lists/* \
    && update-alternatives --install /usr/bin/clang clang /usr/bin/clang-16 100 \
    && update-alternatives --install /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-16 100
# Set environment for clang 16
ENV LD_LIBRARY_PATH=/usr/lib/llvm-16/lib:${LD_LIBRARY_PATH}
ENV LIBCLANG_PATH=/usr/lib/llvm-16/lib


# ---- Protobuf 3.21.12 toolchain ----
ARG PB_VER=3.21.12
RUN set -eux; cd /tmp; \
    curl -L -o protobuf.tar.gz https://github.com/protocolbuffers/protobuf/archive/refs/tags/v${PB_VER}.tar.gz; \
    tar -xzf protobuf.tar.gz; cd protobuf-${PB_VER}; \
    cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -Dprotobuf_BUILD_TESTS=OFF \
    -DCMAKE_INSTALL_PREFIX=/opt/protobuf-${PB_VER} \
    -DBUILD_SHARED_LIBS=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON; \
    cmake --build build -j"$(nproc)"; \
    cmake --install build; \
    rm -rf /tmp/protobuf*

ENV PROTOBUF_ROOT=/opt/protobuf-${PB_VER}
ENV PATH=${PROTOBUF_ROOT}/bin:${PATH}
ENV LD_LIBRARY_PATH=${PROTOBUF_ROOT}/lib:${LD_LIBRARY_PATH}

# ---- libtar with PIC support ----
ARG LIBTAR_VER=1.2.20
RUN set -eux; cd /tmp; \
    curl -L -o libtar.tar.gz https://repo.or.cz/libtar.git/snapshot/v${LIBTAR_VER}.tar.gz; \
    tar -xzf libtar.tar.gz; \
    cd libtar-*; \
    autoreconf -fiv; \
    ./configure --prefix=/usr/local --enable-shared --enable-static CFLAGS="-fPIC"; \
    make -j"$(nproc)"; \
    make install; \
    rm -rf /tmp/libtar*

# Python helpers - use specific clang version that matches libclang
RUN pip install --no-cache-dir wheel setuptools cmake clang==16.0.6 \
    astunparse==1.6.3 gast==0.6.0 dm-tree==0.1.9 six==1.16.0 packaging==25.0 \
    "black[jupyter]"==25.1.0

# Be lenient with bind-mounted repos
RUN git lfs install --system && git config --global --add safe.directory '*'

WORKDIR /workspace
