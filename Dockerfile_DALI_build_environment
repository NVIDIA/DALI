# From the directory containing the Dockerfile
# docker build -t dali-build:cuda12.6 -f Dockerfile_DALI_build_environment .

# # on your host
# mkdir -p ~/DALI ~/dali-out

# docker run --rm -it --gpus all \
#   -v ~/DALI:/workspace/DALI \
#   -v ~/dali-out:/out \
#   dali-build:cuda12.6 bash

# inside container:
# cd /workspace/DALI
# git submodule update --init --recursive

# # Make sure LFS objects (e.g., cvcuda stubs) are present
# git lfs fetch
# git lfs checkout

# # Fresh build dir
# rm -rf build && mkdir build && cd build

# cmake .. \
#   -DCMAKE_BUILD_TYPE=Release \
#   -DProtobuf_DIR="$PROTOBUF_ROOT/lib/cmake/protobuf" \
#   -DProtobuf_PROTOC_EXECUTABLE="$PROTOBUF_ROOT/bin/protoc" \
#   -DPython3_EXECUTABLE=/usr/bin/python3

# make -j"$(nproc)"

# CUDA 12.6 devel on Ubuntu 22.04 (Jammy)
FROM nvidia/cuda:12.6.2-devel-ubuntu22.04
ENV DEBIAN_FRONTEND=noninteractive

# Base deps + multimedia libs
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential ninja-build pkg-config \
    git git-lfs ca-certificates curl wget gnupg software-properties-common \
    python3 python3-dev python3-pip python3-venv python-is-python3 \
    libjpeg-turbo8-dev libtiff-dev liblmdb-dev libsndfile1-dev libtar-dev \
    libcfitsio-dev \
    libavformat-dev libavcodec-dev libavfilter-dev libavutil-dev libswscale-dev \
    libopencv-dev \
    && rm -rf /var/lib/apt/lists/*

# Newer CMake
RUN curl -fsSL https://apt.kitware.com/keys/kitware-archive-latest.asc \
    | gpg --dearmor -o /etc/apt/trusted.gpg.d/kitware.gpg \
    && apt-add-repository 'deb https://apt.kitware.com/ubuntu/ jammy main' \
    && apt-get update && apt-get install -y --no-install-recommends cmake \
    && rm -rf /var/lib/apt/lists/*

# ---- LLVM/Clang 14 (correct Jammy package names) ----
RUN apt-get update && apt-get install -y --no-install-recommends \
    clang-14 llvm-14 llvm-14-dev libclang1-14 libclang-14-dev python3-clang \
    && rm -rf /var/lib/apt/lists/*

# Make libclang discoverable by clang.cindex
RUN ln -sf /usr/lib/llvm-14/lib/libclang.so.1 /usr/lib/llvm-14/lib/libclang.so
ENV LIBCLANG_PATH=/usr/lib/llvm-14/lib
ENV LD_LIBRARY_PATH=/usr/lib/llvm-14/lib:${LD_LIBRARY_PATH}

# ---- Protobuf 3.21.12 toolchain ----
ARG PB_VER=3.21.12
RUN set -eux; cd /tmp; \
    curl -L -o protobuf.tar.gz https://github.com/protocolbuffers/protobuf/archive/refs/tags/v${PB_VER}.tar.gz; \
    tar -xzf protobuf.tar.gz; cd protobuf-${PB_VER}; \
    cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -Dprotobuf_BUILD_TESTS=OFF \
    -DCMAKE_INSTALL_PREFIX=/opt/protobuf-${PB_VER}; \
    cmake --build build -j"$(nproc)"; \
    cmake --install build; \
    rm -rf /tmp/protobuf*

ENV PROTOBUF_ROOT=/opt/protobuf-3.21.12
ENV PATH=${PROTOBUF_ROOT}/bin:${PATH}
ENV LD_LIBRARY_PATH=${PROTOBUF_ROOT}/lib:${LD_LIBRARY_PATH}

# Python helpers
RUN pip install --no-cache-dir wheel setuptools cmake clang

# Be lenient with bind-mounted repos
RUN git lfs install --system && git config --global --add safe.directory '*'

WORKDIR /workspace
