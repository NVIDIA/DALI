# Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from setuptools import setup, find_namespace_packages
from dali_tf_plugin_install_tool import InstallerHelper
from setuptools.dist import Distribution
from setuptools.extension import Extension
import os
import sys

from setuptools.command.build_ext import build_ext
from setuptools.command.egg_info import egg_info

DALI_PKG_REQ = 'nvidia-dali@DALI_FLAVOR_MINUS@-cuda@CUDA_VERSION_SHORT_DIGIT_ONLY@==@DALI_VERSION@'
NVIDIA_INDEX_URL = "https://developer.download.nvidia.com/compute/redist/@DALI_FLAVOR@"

def is_dali_installed():
    try:
        import nvidia.dali
    except:
        return False
    return True

def pip_install(pkg_req, user=False):
    pip_args = [
        "install",
        "--index-url", NVIDIA_INDEX_URL
    ]
    if user:
        pip_args.append("--user")
    pip_args.append(pkg_req)

    from pip._internal import main as pip
    return pip(pip_args) == 0

class CustomBuildExt(build_ext, object):
    def run(self):
        if not is_dali_installed():
            raise RuntimeError("NVIDIA DALI should be installed at this point.")
        helper = InstallerHelper(plugin_dest_dir = os.path.join(self.build_lib, 'nvidia', 'dali_tf_plugin'))
        helper.install()

class EggInfoCommand(egg_info):
    """A class for setuptools egg_info command.
    DALI TF requires DALI to be installed when the package is built (not installed).
    We are overriding egg_info command to install DALI package before build_ext command,
    if it was not installed already.
    """

    def run(self):
        """Installing DALI if not already installed during EggInfo command (first egg_info run)"""
        handle_deps = all([keyword in sys.argv for keyword in ["egg_info", "--egg-base"]]) 
        if handle_deps and not is_dali_installed():
            ret = pip_install(DALI_PKG_REQ, user=False)
            if not ret:
                ret = pip_install(DALI_PKG_REQ, user=True)
            if not ret:
                raise RuntimeError("Could not install {}. Please install it and try again".format(DALI_PKG_REQ))
            # For nvidia.dali to be importable, restart the program from scratch
            os.execl(sys.executable, sys.executable, *sys.argv)

        super(EggInfoCommand, self).run()

class CustomDistribution(Distribution):
    def __init__(self, attrs=None):
        Distribution.__init__(self, attrs)
        # Just telling distutils that we have an ext module
        # It doesn't matter what we write here, because we are overriding the
        # build_ext step altogether.
        # By filling this ext_modules we are signaling that this package needs
        # to be built for different platforms
        self.ext_modules = [Extension('nvidia.dali_tf_plugin', [])]


setup(name='nvidia-dali-tf-plugin@DALI_FLAVOR_MINUS@-cuda@CUDA_VERSION_SHORT_DIGIT_ONLY@',
      description='NVIDIA DALI @DALI_FLAVOR@ Tensorflow plugin for CUDA @CUDA_VERSION_SHORT@. Git SHA: @GIT_SHA@',
      url='https://github.com/NVIDIA/dali',
      version='@DALI_VERSION@',
      author='NVIDIA Corporation',
      license='Apache License 2.0',
      packages=find_namespace_packages(include=['nvidia.*']),
      include_package_data=True,
      zip_safe=False,
      install_requires=[DALI_PKG_REQ],
      cmdclass={
          'build_ext': CustomBuildExt,
          'egg_info': EggInfoCommand,
      },
      distclass=CustomDistribution
     )
