// Copyright (c) 2021, NVIDIA CORPORATION. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "dali/operators/random/noise/shot_noise.h"
#include "dali/operators/random/rng_base_cpu.h"
#include "dali/pipeline/operator/arg_helper.h"

namespace dali {

DALI_SCHEMA(noise__Shot)
    .DocStr(R"code(Applies shot noise to the input.

The shot noise is generated by applying the following formula::

    output[:] = poisson_dist(max(0, input[:] / factor)) * factor) if factor != 0
    output[:] = input[:]                                          if factor == 0

where ``poisson_dist`` represents a poisson distribution.

The factor can be interpreted as the number of event registrations (modeled by the poisson distribution)
are required to increase the output value by 1. For example, a factor of 0.1 means we need the
10 events to increase the output by 1, while a factor of 10 means that a single event
increases the output by 10. The higher the factor, the more noise will be applied to the data.
A factor of 0 translates to an identity operation.

The shape and data type of the output will match the input.
)code")
    .NumInput(1)
    .NumOutput(1)
    .AddOptionalArg<float>("factor",
      R"code(Factor parameter.)code",
     20.0f, true);

DALI_REGISTER_OPERATOR(noise__Shot, ShotNoise<CPUBackend>, CPU);

}  // namespace dali
