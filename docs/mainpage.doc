/**
 * @mainpage
 * 
 * @section intro Introduction
 * NDLL (Nvidia Data Loading Library) is broken into two mains parts. The first part
 * is a library of base primitives for data loading and augmentation. These are
 * organized in the source tree by what type of data they operate on. We currently
 * only have image primitives, so all of the primitives are located under @ref ndll/image/.
 *
 * The second part is a high performance data Pipeline (@ref ndll/pipeline). The pipeline 
 * is designed to be quite general and extensible.
 *
 * @section lib Library
 * The library is currently quite small, but the goal is to build up a set of primitives
 * used by the frameworks so that all frameworks have access to the same data augmentation
 * and data loading functions.
 *
 * @section pipe Pipeline
 * The Pipeline class is heavily documented. See @ref ndll::Pipeline for core docs, and 
 * the following classes for documentation on other important classes used in the Pipeline.
 *
 * @subsection ops Operators:
 * @ref ndll::Operator<Backend> @n
 * @ref ndll::Transformer<Backend> @n
 * @ref ndll::Decoder<Backend> @n
 * @ref ndll::DataReader @n
 * @ref ndll::Parser @n
 *
 * @subsection data Data Storage:
 * @ref ndll::Buffer<Backend> @n
 * @ref ndll::Batch<Backend> @n
 * @ref ndll::Tensor<Backend> @n
 * @ref ndll::Datum<Backend>
 *
 * @subsection mem Memory Allocation:
 * @ref ndll::CPUBackend @n
 * @ref ndll::GPUBackend @n
 * @ref ndll::AllocatorBase @n
 * @ref ndll::CPUAllocator @n
 * @ref ndll::GPUAllocator
 *
 *
 * @subsection pipe_struct Pipeline Structures:
 * @ref ndll::Channel
 *
 * @section design Design Strain
 * This section discusses some design points that are currently a bit strained and need
 * refactoring.
 *
 * @subsection param Batch Size & Thread Pool Size
 * All ops need the batch size and thread pool size to set up whatever datum-wise
 * or thread local data they need. I didn't want users to have to pass this in to
 * every op, so I just set it in the pipeline and have the pipeline set it in all
 * the ops in the 'Pipeline::Build' method. This isn't great because the Ops can't
 * do some setup in their constructor, and they have to override the methods
 * that set these paramters to intialize their data. It also means we have to check
 * to make sure these have been set prior to doing stuff. I need to come up with a
 * better way to get this global information to everyone.
 *
 * @subsection inline Inline Member Functions
 * Alot of methods are defined inline in the pipeline. These should be moved out to
 * make the code more readable.
 */
