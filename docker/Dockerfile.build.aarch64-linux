ARG AARCH64_CUDA_TOOL_IMAGE_NAME
ARG AARCH64_BASE_IMAGE=nvidia/cuda:10.2-devel-ubuntu18.04
FROM ${AARCH64_CUDA_TOOL_IMAGE_NAME} as aarch64_cuda_tools
FROM ${AARCH64_BASE_IMAGE}

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    wget \
    unzip \
    git \
    rsync \
    libjpeg-dev \
    dh-autoreconf \
    gcc-aarch64-linux-gnu \
    g++-aarch64-linux-gnu \
    pkg-config \
    libtool \
    libtool-bin \
    python3-distutils \
    zip \
    python3.6 python3.6-dev \
    python3.7 python3.7-dev \
    python3.8 python3.8-dev \
    && \
    if [ $(apt-cache search python3.9 | wc -l) -eq 0 ]; then \
        apt-get install software-properties-common -y --no-install-recommends && \
        add-apt-repository ppa:deadsnakes/ppa -y && \
        apt-get update; \
    fi && \
    apt-get install -y python3.9 python3.9-dev && \
    rm -rf /var/lib/apt/lists/* && \
    curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && python3 get-pip.py && rm get-pip.py && \
    # decouple libclang and clang installation so libclang changes are not overriden by clang
    pip install clang && pip install libclang && \
    rm -rf /root/.cache/pip/ && \
    cd /tmp && git clone https://github.com/NixOS/patchelf && cd patchelf && \
    ./bootstrap.sh && ./configure --prefix=/usr/ && make -j install && cd / && rm -rf /tmp/patchelf && \
    ln -s /usr/bin/python3 /usr/bin/python

COPY --from=aarch64_cuda_tools *.deb ./

ENV CUDA_CROSS_VERSION=10.2
ENV CUDA_CROSS_PACKAGES="cudart cufft curand driver misc-headers npp"
RUN dpkg -i *.deb && \
    echo "for i in \$CUDA_CROSS_PACKAGES; do echo \"cuda-\$i-cross-aarch64-\${CUDA_CROSS_VERSION}\";done" | bash > /tmp/cuda-packages.txt && \
    apt-get update \
   && apt-get install -y $(cat /tmp/cuda-packages.txt) \
   && rm -rf /var/lib/apt/lists/* \
   && rm -rf /tmp/cuda-packages.txt

# zlib
RUN LIBZ_VERSION=1.2.11 && \
    cd /tmp && \
    curl -L https://github.com/madler/zlib/archive/v${LIBZ_VERSION}.tar.gz | tar -xzf - && \
    cd zlib-${LIBZ_VERSION} && \
      CFLAGS="-fPIC" \
      CXXFLAGS="-fPIC" \
      CC=aarch64-linux-gnu-gcc \
      CXX=aarch64-linux-gnu-g++ \
    ./configure -prefix=/usr/aarch64-linux-gnu/ && \
    make install -j"$(grep ^processor /proc/cpuinfo | wc -l)" && \
    cd && \
    rm -rf /tmp/zlib-${LIBZ_VERSION}

# CMake
RUN CMAKE_VERSION=3.13 && \
    CMAKE_BUILD=3.13.5 && \
    curl -L https://cmake.org/files/v${CMAKE_VERSION}/cmake-${CMAKE_BUILD}.tar.gz | tar -xzf - && \
    cd /cmake-${CMAKE_BUILD} && \
    ./bootstrap --parallel=$(grep ^processor /proc/cpuinfo | wc -l) && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install && \
    rm -rf /cmake-${CMAKE_BUILD}

# protobuf
ENV PROTOBUF_VERSION=3.14.0
RUN curl -L https://github.com/google/protobuf/releases/download/v${PROTOBUF_VERSION}/protobuf-all-${PROTOBUF_VERSION}.tar.gz | tar -xzf - && \
    cd /protobuf-${PROTOBUF_VERSION} && \
    ./autogen.sh && \
    ./configure CXXFLAGS="-fPIC" --prefix=/usr/local --disable-shared 2>&1 > /dev/null && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install 2>&1 > /dev/null

# LMDB
COPY docker/Makefile-lmdb.patch /tmp
RUN LMDB_VERSION=0.9.24 && \
    git clone -b LMDB_${LMDB_VERSION} --single-branch https://github.com/LMDB/lmdb && \
    cd /lmdb/libraries/liblmdb && \
    patch -p3 < /tmp/Makefile-lmdb.patch && \
    rm -f /tmp/Makefile-lmdb.patch && \
      CFLAGS="-fPIC" CXXFLAGS="-fPIC" CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ prefix=/usr/aarch64-linux-gnu \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install && \
    rm -rf /lmdb

RUN cd /protobuf-${PROTOBUF_VERSION} && make clean \
    ./autogen.sh && ./configure \
    CXXFLAGS="-fPIC" \
    CC=aarch64-linux-gnu-gcc \
    CXX=aarch64-linux-gnu-g++ \
      --host=aarch64-unknown-linux-gnu \
      --with-protoc=/usr/local/bin/protoc \
      --prefix=/usr/aarch64-linux-gnu/ && make -j$(nproc) install && \
    rm -rf /protobuf-${PROTOBUF_VERSION}


# libjpeg-turbo
RUN JPEG_TURBO_VERSION=2.0.6 && \
    curl -L https://github.com/libjpeg-turbo/libjpeg-turbo/archive/${JPEG_TURBO_VERSION}.tar.gz | tar -xzf - && \
    cd libjpeg-turbo-${JPEG_TURBO_VERSION} && \
    echo "set(CMAKE_SYSTEM_NAME Linux)" > toolchain.cmake && \
    echo "set(CMAKE_SYSTEM_PROCESSOR aarch64)" >> toolchain.cmake && \
    echo "set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)" >> toolchain.cmake && \
      CFLAGS="-fPIC" \
      CXXFLAGS="-fPIC" \
      CC=aarch64-linux-gnu-gcc \
      CXX=aarch64-linux-gnu-g++ \
    cmake -G"Unix Makefiles" -DCMAKE_TOOLCHAIN_FILE=toolchain.cmake -DENABLE_SHARED=TRUE -DCMAKE_INSTALL_PREFIX=/usr/aarch64-linux-gnu/ . 2>&1 >/dev/null && \
      CFLAGS="-fPIC" \
      CXXFLAGS="-fPIC" \
      CC=aarch64-linux-gnu-gcc \
      CXX=aarch64-linux-gnu-g++ \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install 2>&1 >/dev/null && \
    rm -rf /libjpeg-turbo-${JPEG_TURBO_VERSION}

# zstandard compression library
RUN ZSTANDARD_VERSION=1.4.5 && \
    curl -L https://github.com/facebook/zstd/releases/download/v${ZSTANDARD_VERSION}/zstd-${ZSTANDARD_VERSION}.tar.gz | tar -xzf - && \
    cd zstd-${ZSTANDARD_VERSION} && \
      CFLAGS="-fPIC" CXXFLAGS="-fPIC" CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ prefix=/usr/aarch64-linux-gnu \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install 2>&1 >/dev/null && \
    rm -rf /zstd-${ZSTANDARD_VERSION}

# libtiff
RUN LIBTIFF_VERSION=4.1.0 && \
    cd /tmp && \
    curl -L http://download.osgeo.org/libtiff/tiff-${LIBTIFF_VERSION}.tar.gz | tar -xzf - && \
    cd tiff-${LIBTIFF_VERSION} && \
    ./autogen.sh && \
    ./configure \
      CFLAGS="-fPIC" \
      CXXFLAGS="-fPIC" \
      CC=aarch64-linux-gnu-gcc \
      CXX=aarch64-linux-gnu-g++ \
      --host=aarch64-unknown-linux-gnu \
      --prefix=/usr/aarch64-linux-gnu/ \
      --with-zstd-include-dir=/usr/aarch64-linux-gnu/include \
      --with-zstd-lib-dir=/usr/aarch64-linux-gnu/lib         \
      --with-zlib-include-dir=/usr/aarch64-linux-gnu/include \
      --with-zlib-lib-dir=/usr/aarch64-linux-gnu/lib      && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && \
    make install && \
    cd && \
    rm -rf /tmp/tiff-${LIBTIFF_VERSION}

# OpenJPEG
RUN OPENJPEG_VERSION=2.3.1 && \
    cd /tmp && \
    curl -L https://github.com/uclouvain/openjpeg/archive/v${OPENJPEG_VERSION}.tar.gz | tar -xzf - && \
    cd openjpeg-${OPENJPEG_VERSION} && mkdir build && cd build && \
    echo "set(CMAKE_SYSTEM_NAME  Linux)" > toolchain.cmake && \
    echo "set(CMAKE_SYSTEM_PROCESSOR aarch64)" >> toolchain.cmake && \
    echo "set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)" >> toolchain.cmake && \
      CFLAGS="-fPIC" \
      CXXFLAGS="-fPIC" \
      CC=aarch64-linux-gnu-gcc \
      CXX=aarch64-linux-gnu-g++ \
    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=toolchain.cmake -DBUILD_CODEC=OFF \
          -DCMAKE_INSTALL_PREFIX=/usr/aarch64-linux-gnu/ .. && \
      CFLAGS="-fPIC" \
      CXXFLAGS="-fPIC" \
      CC=aarch64-linux-gnu-gcc \
      CXX=aarch64-linux-gnu-g++ \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install && \
    rm -rf openjpeg-${OPENJPEG_VERSION}

# OpenCV
RUN OPENCV_VERSION=4.5.0 && \
    curl -L https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz | tar -xzf - && \
    cd /opencv-${OPENCV_VERSION} && mkdir build && cd build && \
    cmake -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=$PWD/../platforms/linux/aarch64-gnu.toolchain.cmake \
          -DCMAKE_INSTALL_PREFIX=/usr/aarch64-linux-gnu/ \
          -DBUILD_SHARED_LIBS=OFF \
          -DBUILD_LIST=core,improc,imgcodecs \
          -DBUILD_PNG=ON \
          -DBUILD_TIFF=OFF \
          -DBUILD_TBB=OFF \
          -DBUILD_WEBP=OFF \
          -DBUILD_JPEG=OFF \
          -DBUILD_TIFF=OFF \
          -DWITH_JPEG=ON \
          -DWITH_TIFF=ON \
          -DBUILD_JASPER=OFF \
          -DBUILD_ZLIB=ON \
          -DBUILD_EXAMPLES=OFF \
          -DBUILD_opencv_java=OFF \
          -DBUILD_opencv_python2=OFF \
          -DBUILD_opencv_python3=OFF \
          -DENABLE_NEON=OFF \
          -DWITH_PROTOBUF=OFF \
          -DWITH_PTHREADS_PF=OFF \
          -DWITH_OPENCL=OFF \
          -DWITH_OPENMP=OFF \
          -DWITH_FFMPEG=OFF \
          -DWITH_GSTREAMER=OFF \
          -DWITH_GSTREAMER_0_10=OFF \
          -DWITH_CUDA=OFF \
          -DWITH_GTK=OFF \
          -DWITH_VTK=OFF \
          -DWITH_TBB=OFF \
          -DWITH_1394=OFF \
          -DWITH_OPENEXR=OFF \
          -DINSTALL_C_EXAMPLES=OFF \
          -DINSTALL_TESTS=OFF \
          -DVIBRANTE=TRUE \
          VERBOSE=1 ../ && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install && \
    rm -rf /opencv-${OPENCV_VERSION}

ENV PKG_CONFIG_PATH=/usr/aarch64-linux-gnu/lib/pkgconfig

# flac
RUN FLAC_VERSION=1.3.3 && cd /tmp                                                    && \
    wget https://github.com/xiph/flac/archive/${FLAC_VERSION}.tar.gz                 && \
    tar -xf ${FLAC_VERSION}.tar.gz                                                   && \
    rm -f  ${FLAC_VERSION}.tar.gz                                                    && \
    cd flac-$FLAC_VERSION                                                            && \
    ./autogen.sh                                                                     && \
    ./configure CFLAGS="-fPIC" CXXFLAGS="-fPIC" CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ \
                                             --host=aarch64-unknown-linux-gnu --prefix=/usr/aarch64-linux-gnu/ \
                                             --disable-ogg && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && make install                && \
    cd /tmp && rm -rf flac-$FLAC_VERSION

# libogg
RUN OGG_VERSION=1.3.4 && cd /tmp                                                     && \
    wget https://github.com/xiph/ogg/releases/download/v1.3.4/libogg-${OGG_VERSION}.tar.gz && \
    tar -xf libogg-${OGG_VERSION}.tar.gz                                             && \
    rm -f libogg-${OGG_VERSION}.tar.gz                                               && \
    cd libogg-${OGG_VERSION}                                                         && \
    ./configure CFLAGS="-fPIC" CXXFLAGS="-fPIC" CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ \
                                             --host=aarch64-unknown-linux-gnu --prefix=/usr/aarch64-linux-gnu/ && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && make install                && \
    cd /tmp && rm -rf libogg-$OGG_VERSION

# libvorbis
# Install after libogg
RUN VORBIS_VERSION=1.3.7 && cd /tmp                                                   && \
    wget https://github.com/xiph/vorbis/archive/v${VORBIS_VERSION}.tar.gz             && \
    tar -xf v${VORBIS_VERSION}.tar.gz                                                 && \
    rm -f  v${VORBIS_VERSION}.tar.gz                                                  && \
    cd vorbis-$VORBIS_VERSION                                                         && \
    ./autogen.sh                                                                      && \
    ./configure CFLAGS="-fPIC" CXXFLAGS="-fPIC" CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ \
                                             --host=aarch64-unknown-linux-gnu --prefix=/usr/aarch64-linux-gnu/ && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && make install                 && \
    cd /tmp && rm -rf vorbis-$VORBIS_VERSION

# libsnd
RUN LIBSND_VERSION=1.0.28 && cd /tmp                                                                           && \
    wget https://developer.download.nvidia.com/compute/redist/nvidia-dali/libsndfile-${LIBSND_VERSION}.tar.gz  && \
    tar -xf libsndfile-$LIBSND_VERSION.tar.gz                                                                  && \
    rm libsndfile-$LIBSND_VERSION.tar.gz                                                                       && \
    cd libsndfile-$LIBSND_VERSION                                                                              && \
    ./configure CFLAGS="-fPIC" CXXFLAGS="-fPIC" CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ \
                                             --host=aarch64-unknown-linux-gnu --prefix=/usr/aarch64-linux-gnu/ && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install                                                  && \
    cd /tmp && rm -rf libsndfile-$LIBSND_VERSION

# hack - install cross headers in the default python paths, so host python3-config would point to them
RUN export PYVERS="3.6.9 3.7.8 3.8.5 3.9.0" && \
    for PYVER in ${PYVERS}; do \
        cd /tmp && curl -L https://www.python.org/ftp/python/${PYVER}/Python-${PYVER}.tgz | tar -xzf - && \
        rm -rf *.tgz && cd Python*                                                                     && \
        ./configure --disable-ipv6 ac_cv_file__dev_ptmx=no ac_cv_file__dev_ptc=no \
            --disable-shared CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ \
            --build=x86_64-pc-linux-gnu --host=aarch64-linux-gnu --prefix=/usr/                        && \
        make -j"$(grep ^processor /proc/cpuinfo | wc -l)" inclinstall                                  && \
        cd / && rm -rf /tmp/Python*;                                                                      \
    done                                                                                               && \
    # hack - patch the host pythonX-config to return --extension-suffix for the target
    find /usr/ -iname x86_64-linux-gnu-python* -exec sed -i "s/\(SO.*\)\(x86_64\)\(.*\)/\1aarch64\3/" {} \;

VOLUME /dali

WORKDIR /dali

ENV PATH=/usr/local/cuda-10.2/bin:$PATH

ARG DALI_BUILD_DIR=build_aarch64_linux

WORKDIR /dali/${DALI_BUILD_DIR}

CMD WERROR=ON           \
    ARCH=aarch64-linux  \
    BUILD_TEST=ON       \
    BUILD_BENCHMARK=OFF \
    BUILD_NVTX=OFF      \
    BUILD_LMDB=ON       \
    BUILD_JPEG_TURBO=ON \
    BUILD_LIBTIFF=ON    \
    BUILD_LIBSND=ON     \
    BUILD_FFTS=ON       \
    BUILD_NVJPEG=OFF    \
    BUILD_NVJPEG2K=OFF  \
    BUILD_NVOF=OFF      \
    BUILD_NVDEC=OFF     \
    BUILD_NVML=OFF      \
    VERBOSE_LOGS=OFF    \
    BUILD_CUFILE=OFF    \
    TEST_BUNDLED_LIBS=NO\
    WHL_PLATFORM_NAME=manylinux2014_aarch64            \
    BUNDLE_PATH_PREFIX="/usr/aarch64-linux-gnu"        \
    EXTRA_CMAKE_OPTIONS="-DCMAKE_TOOLCHAIN_FILE:STRING=$PWD/../platforms/aarch64-linux/aarch64-linux.toolchain.cmake \
                        -DCMAKE_COLOR_MAKEFILE=ON                                 \
                        -DCMAKE_CUDA_COMPILER=/usr/local/cuda-10.2/bin/nvcc       \
                        -DCUDA_HOST=/usr/local/cuda-10.2                          \
                        -DCUDA_TARGET=/usr/local/cuda-10.2/targets/aarch64-linux" \
    /dali/docker/build_helper.sh                    && \
    rm -rf /dali/${DALI_BUILD_DIR}/nvidia*          && \
    cd /dali/dali_tf_plugin		            && \
    bash /dali/dali_tf_plugin/make_dali_tf_sdist.sh && \
    mv /dali_tf_sdist/*.tar.gz /wheelhouse/         && \
    cp -r /wheelhouse /dali/
