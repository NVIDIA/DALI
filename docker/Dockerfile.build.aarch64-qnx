ARG QNX_CUDA_TOOL_IMAGE_NAME
FROM ${QNX_CUDA_TOOL_IMAGE_NAME} as qnx_cuda_tools
FROM nvidia/cuda:10.0-devel-ubuntu16.04

RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    wget \
    unzip \
    git \
    rsync \
    dh-autoreconf \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

COPY --from=qnx_cuda_tools /qnx /qnx
RUN mv /qnx/cuda* cuda-qnx-cross.deb

# We need to remove QNX's libjpeg.so so OpenCV and DALI do not pick it up over static libjpeg-turbo that we compile
RUN rsync -a /qnx/host/linux/x86_64/ / && \
    mkdir -p /lib64/qnx7/stubs && mv /qnx/lib64/* /lib64/qnx7/stubs && \
    mv /qnx/target/qnx7 /usr/aarch64-unknown-nto-qnx && \
    rm -rf /usr/aarch64-unknown-nto-qnx/aarch64le/lib/libjpeg.so* && \
    rm -rf /usr/aarch64-unknown-nto-qnx/usr/include/j* && \
    rm -rf /usr/aarch64-unknown-nto-qnx/armle-v7 /usr/aarch64-unknown-nto-qnx/x86 /usr/aarch64-unknown-nto-qnx/x86_64 && \
    rm -rf /qnx

ENV QNX_HOST=/
ENV QNX_TARGET=/usr/aarch64-unknown-nto-qnx

ENV REPO_DEBS="cuda-qnx-cross.deb"

ENV CUDA_CROSS_VERSION=10-0

ENV CUDA_CROSS_PACKAGES="cublas cudart cufft curand cusolver cusparse driver misc-headers npp"

RUN dpkg -i $REPO_DEBS && \
    echo "for i in \$CUDA_CROSS_PACKAGES; do echo \"cuda-\$i-cross-qnx-\${CUDA_CROSS_VERSION}\";done" | bash > /tmp/cuda-packages.txt && \
    apt-get update \
   && apt-get install -y $(cat /tmp/cuda-packages.txt) \
   && rm -rf /var/lib/apt/lists/* \
   && rm -rf /tmp/cuda-packages.txt

# Boost
RUN BOOST_VERSION=1_66_0 \
   && cd /usr/local \
   && curl -L https://dl.bintray.com/boostorg/release/1.66.0/source/boost_${BOOST_VERSION}.tar.gz | tar -xzf - \
   && ln -s ../boost_${BOOST_VERSION}/boost include/boost

# CMake
RUN CMAKE_VERSION=3.11 && \
    CMAKE_BUILD=3.11.0 && \
    curl -L https://cmake.org/files/v${CMAKE_VERSION}/cmake-${CMAKE_BUILD}.tar.gz | tar -xzf - && \
    cd /cmake-${CMAKE_BUILD} && \
    ./bootstrap --parallel=$(grep ^processor /proc/cpuinfo | wc -l) && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install && \
    rm -rf /cmake-${CMAKE_BUILD}

# protobuf v3.11.1
ENV PROTOBUF_VERSION=3.11.1
RUN curl -L https://github.com/google/protobuf/releases/download/v${PROTOBUF_VERSION}/protobuf-all-${PROTOBUF_VERSION}.tar.gz | tar -xzf - && \
    cd /protobuf-${PROTOBUF_VERSION} && \
    ./autogen.sh && \
    ./configure CXXFLAGS="-fPIC" --prefix=/usr/local --disable-shared 2>&1 > /dev/null && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install 2>&1 > /dev/null

RUN cd /protobuf-${PROTOBUF_VERSION} && make clean \
    ./autogen.sh && ./configure \
    CC=$QNX_HOST/usr/bin/aarch64-unknown-nto-qnx7.0.0-gcc \
    CXX=$QNX_HOST/usr/bin/aarch64-unknown-nto-qnx7.0.0-g++ \
    CXXFLAGS="-fPIC -D__EXT_POSIX1_198808 -I$QNX_TARGET/usr/include -I$QNX_TARGET/usr/include/aarch64 -I$QNX_TARGET/usr/include/c++/v1 -L$QNX_TARGET/aarch64le/lib -D_POSIX_C_SOURCE=200112L -D_QNX_SOURCE -D_FILE_OFFSET_BITS=64" \
      --host=aarch64-unknown-nto-qnx7.0.0 \
      --build=x86_64-linux-gnu \
      --with-sysroot=$QNX_TARGET \
      --prefix=/usr/aarch64-unknown-nto-qnx/aarch64le \
      --with-protoc=/usr/local/bin/protoc && make -j$(nproc) install && \
    rm -rf /protobuf-${PROTOBUF_VERSION}

# libjpeg-turbo
RUN JPEG_TURBO_VERSION=2.0.2 && \
    curl -L https://github.com/libjpeg-turbo/libjpeg-turbo/archive/${JPEG_TURBO_VERSION}.tar.gz | tar -xzf - && \
    cd libjpeg-turbo-${JPEG_TURBO_VERSION} && \
    echo "set(CMAKE_SYSTEM_NAME  Linux)" > toolchain.cmake && \
    echo "set(CMAKE_SYSTEM_PROCESSOR aarch64)" >> toolchain.cmake && \
    echo "set(CMAKE_C_COMPILER aarch64-unknown-nto-qnx7.0.0-gcc)" >> toolchain.cmake && \
      CFLAGS="-fPIC" \
      CXXFLAGS="-fPIC" \
      CC=aarch64-unknown-nto-qnx7.0.0-gcc \
      CXX=aarch64-unknown-nto-qnx7.0.0-g++ \
    cmake -G"Unix Makefiles" -DENABLE_SHARED=FALSE -DCMAKE_TOOLCHAIN_FILE=toolchain.cmake -DCMAKE_INSTALL_PREFIX=/usr/aarch64-unknown-nto-qnx/aarch64le . 2>&1 >/dev/null && \
      CFLAGS="-fPIC" \
      CXXFLAGS="-fPIC" \
      CC=aarch64-unknown-nto-qnx7.0.0-gcc \
      CXX=aarch64-unknown-nto-qnx7.0.0-g++ \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install 2>&1 >/dev/null && \
    rm -rf /libjpeg-turbo-${JPEG_TURBO_VERSION}

# libtiff
RUN LIBTIFF_VERSION=4.0.10 && \
    cd /tmp && \
    curl -L http://download.osgeo.org/libtiff/tiff-${LIBTIFF_VERSION}.tar.gz | tar -xzf - && \
    cd tiff-${LIBTIFF_VERSION} && \
    ./autogen.sh && \
    ./configure \
      CFLAGS="-fPIC" \
      CXXFLAGS="-fPIC" \
      CC=aarch64-unknown-nto-qnx7.0.0-gcc \
      CXX=aarch64-unknown-nto-qnx7.0.0-g++ \
      --host=aarch64-unknown-nto-qnx7.0.0 \
      --prefix=/usr/aarch64-unknown-nto-qnx/aarch64le && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && \
    make install && \
    cd && \
    rm -rf /tmp/tiff-${LIBTIFF_VERSION}

# OpenCV
ENV OPENCV_VERSION=3.4.3
COPY docker/opencv-qnx.patch /opencv-qnx.patch
RUN curl -L https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz | tar -xzf - && \
    cd /opencv-${OPENCV_VERSION} && git apply /opencv-qnx.patch \
    && mkdir build && cd build && \
    cmake -DCMAKE_BUILD_TYPE=Release \
          -DVIBRANTE_PDK:STRING=/ \
          -DCMAKE_TOOLCHAIN_FILE=$PWD/../platforms/qnx/aarch64-qnx.toolchain.cmake \
          -DCMAKE_INSTALL_PREFIX=/usr/aarch64-unknown-nto-qnx/aarch64le  \
          -DBUILD_SHARED_LIBS=OFF \
          -DBUILD_LIST=core,improc,imgcodecs \
          -DBUILD_PNG=ON \
          -DBUILD_TBB=OFF \
          -DBUILD_WEBP=OFF \
          -DBUILD_JPEG=OFF \
          -DBUILD_TIFF=OFF \
          -DWITH_JPEG=ON \
          -DWITH_TIFF=ON \
          -DBUILD_JASPER=OFF \
          -DBUILD_ZLIB=ON \
          -DBUILD_EXAMPLES=OFF \
          -DBUILD_FFMPEG=ON \
          -DBUILD_opencv_java=OFF \
          -DBUILD_opencv_python2=OFF \
          -DBUILD_opencv_python3=OFF \
          -DENABLE_NEON=OFF \
          -DWITH_PROTOBUF=OFF \
          -DWITH_PTHREADS_PF=OFF \
          -DWITH_OPENCL=OFF \
          -DWITH_OPENMP=OFF \
          -DWITH_FFMPEG=OFF \
          -DWITH_GSTREAMER=OFF \
          -DWITH_GSTREAMER_0_10=OFF \
          -DWITH_CUDA=OFF \
          -DWITH_GTK=OFF \
          -DWITH_VTK=OFF \
          -DWITH_TBB=OFF \
          -DWITH_1394=OFF \
          -DWITH_OPENEXR=OFF \
          -DINSTALL_C_EXAMPLES=OFF \
          -DINSTALL_TESTS=OFF \
          -DVIBRANTE=TRUE \
          VERBOSE=1 ../ && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install && \
    rm -rf /opencv-${OPENCV_VERSION}

ENV PKG_CONFIG_PATH=/usr/aarch64-unknown-nto-qnx/aarch64le/lib/pkgconfig

# flac
# QNX doesn't support wcswidth as DJGPP, so enabling __DJGPP__ fixes the problem
RUN FLAC_VERSION=1.3.3 && cd /tmp                                                    && \
    wget https://ftp.osuosl.org/pub/xiph/releases/flac/flac-${FLAC_VERSION}.tar.xz   && \
    tar -xf flac-$FLAC_VERSION.tar.xz                                                && \
    rm flac-$FLAC_VERSION.tar.xz                                                     && \
    cd flac-$FLAC_VERSION                                                            && \
    ./configure CFLAGS="-fPIC -D__DJGPP__" CXXFLAGS="-fPIC -D__DJGPP__" CC=aarch64-unknown-nto-qnx7.0.0-gcc \
           CXX=aarch64-unknown-nto-qnx7.0.0-g++ --host=aarch64-unknown-nto-qnx7.0.0 \
           --prefix=/usr/aarch64-unknown-nto-qnx/aarch64le --disable-ogg             && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && make install                && \
    cd /tmp && rm -rf flac-$FLAC_VERSION

# libogg
RUN OGG_VERSION=1.3.4 && cd /tmp                                                     && \
    wget http://downloads.xiph.org/releases/ogg/libogg-${OGG_VERSION}.tar.gz         && \
    tar -xf libogg-$OGG_VERSION.tar.gz                                               && \
    rm libogg-$OGG_VERSION.tar.gz                                                    && \
    cd libogg-$OGG_VERSION                                                           && \
    ./configure CFLAGS="-fPIC" CXXFLAGS="-fPIC" CC=aarch64-unknown-nto-qnx7.0.0-gcc \
           CXX=aarch64-unknown-nto-qnx7.0.0-g++ --host=aarch64-unknown-nto-qnx7.0.0 \
           --prefix=/usr/aarch64-unknown-nto-qnx/aarch64le                           && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && make install                && \
    cd /tmp && rm -rf libogg-$OGG_VERSION

# libvorbis
# Install after libogg
RUN VORBIS_VERSION=1.3.6 && cd /tmp                                                   && \
    wget http://downloads.xiph.org/releases/vorbis/libvorbis-${VORBIS_VERSION}.tar.xz && \
    tar -xf libvorbis-$VORBIS_VERSION.tar.xz                                          && \
    rm libvorbis-$VORBIS_VERSION.tar.xz                                               && \
    cd libvorbis-$VORBIS_VERSION                                                      && \
    ./configure CFLAGS="-fPIC" CXXFLAGS="-fPIC" CC=aarch64-unknown-nto-qnx7.0.0-gcc \
           CXX=aarch64-unknown-nto-qnx7.0.0-g++ --host=aarch64-unknown-nto-qnx7.0.0 \
           --prefix=/usr/aarch64-unknown-nto-qnx/aarch64le                            && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && make install                 && \
    cd /tmp && rm -rf libvorbis-$VORBIS_VERSION

# libsnd
# libsnd cannot find /usr/aarch64-unknown-nto-qnx/aarch64le/include for FLAC so add it manually
RUN LIBSND_VERSION=1.0.28 && cd /tmp                                                                           && \
    wget https://developer.download.nvidia.com/compute/redist/nvidia-dali/libsndfile-${LIBSND_VERSION}.tar.gz  && \
    tar -xf libsndfile-$LIBSND_VERSION.tar.gz                                                                  && \
    rm libsndfile-$LIBSND_VERSION.tar.gz                                                                       && \
    cd libsndfile-$LIBSND_VERSION                                                                              && \
    ./configure CFLAGS="-fPIC -I/usr/aarch64-unknown-nto-qnx/aarch64le/include" CXXFLAGS="-fPIC -I/usr/aarch64-unknown-nto-qnx/aarch64le/include" CC=aarch64-unknown-nto-qnx7.0.0-gcc \
           CXX=aarch64-unknown-nto-qnx7.0.0-g++ --host=aarch64-unknown-nto-qnx7.0.0 \
           --prefix=/usr/aarch64-unknown-nto-qnx/aarch64le                                                     && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install                                                  && \
    cd /tmp && rm -rf libsndfile-$LIBSND_VERSION

VOLUME /dali

WORKDIR /dali

ENV PATH=/usr/local/cuda-10.0/bin:$PATH

ARG DALI_BUILD_DIR=build_aarch64_qnx

WORKDIR /dali/${DALI_BUILD_DIR}

CMD cmake \
  -DWERROR=ON \
  -DCMAKE_TOOLCHAIN_FILE:STRING="$PWD/../platforms/qnx/aarch64-qnx.toolchain.cmake" \
  -DCMAKE_COLOR_MAKEFILE=ON \
  -DCMAKE_INSTALL_PREFIX=./install \
  -DARCH=aarch64-qnx \
  -DCUDA_HOST=/usr/local/cuda-10.0 \
  -DCUDA_TARGET=/usr/local/cuda-10.0/targets/aarch64-qnx \
  -DBUILD_TEST=ON \
  -DBUILD_BENCHMARK=OFF \
  -DBUILD_NVTX=OFF \
  -DBUILD_PYTHON=OFF \
  -DBUILD_LMDB=OFF \
  -DBUILD_TENSORFLOW=OFF \
  -DBUILD_JPEG_TURBO=ON \
  -DBUILD_LIBTIFF=ON \
  -DBUILD_NVJPEG=OFF \
  -DBUILD_NVOF=OFF \
  -DBUILD_NVDEC=OFF \
  -DBUILD_LIBSND=ON \
  -DBUILD_NVML=OFF \
  -DBUILD_FFTS=ON \
  -DVERBOSE_LOGS=OFF \
  .. && \
  make install -j"$(grep ^processor /proc/cpuinfo | wc -l)"
