ARG QNX_CUDA_TOOL_IMAGE_NAME
ARG QNX_BASE_IMAGE=nvidia/cuda:10.0-devel-ubuntu18.04
FROM ${QNX_CUDA_TOOL_IMAGE_NAME} as qnx_cuda_tools
FROM ${QNX_BASE_IMAGE}

RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    wget \
    unzip \
    git \
    rsync \
    dh-autoreconf \
    pkg-config \
    libtool \
    libtool-bin \
    autogen \
    python3.6 \
    python3-distutils \
    && rm -rf /var/lib/apt/lists/* && \
    ln -s /usr/bin/python3 /usr/bin/python && \
    PYTHON_VER=$(python -c "import sys;print(f'{sys.version_info[0]}{sys.version_info[1]}')") && \
    if [ "${PYTHON_VER}" = "36" ]; then \
        curl -O https://bootstrap.pypa.io/pip/3.6/get-pip.py; \
    else \
        curl -O https://bootstrap.pypa.io/get-pip.py; \
    fi && python get-pip.py && rm get-pip.py && \
    # decouple libclang and clang installation so libclang changes are not overriden by clang
    pip install clang==14.0 && pip install libclang==14.0.1 && \
    rm -rf /root/.cache/pip/

COPY --from=qnx_cuda_tools /qnx /qnx
RUN mv /qnx/cuda* cuda-qnx-cross.deb

# We need to remove QNX's libjpeg.so so OpenCV and DALI do not pick it up over static libjpeg-turbo that we compile
RUN rsync -a /qnx/host/linux/x86_64/ / && \
    mkdir -p /lib64/qnx7/stubs && mv /qnx/lib64/* /lib64/qnx7/stubs && \
    mv /qnx/target/qnx7 /usr/aarch64-unknown-nto-qnx && \
    rm -rf /usr/aarch64-unknown-nto-qnx/aarch64le/lib/libjpeg.so* && \
    rm -rf /usr/aarch64-unknown-nto-qnx/usr/include/j* && \
    rm -rf /usr/aarch64-unknown-nto-qnx/armle-v7 /usr/aarch64-unknown-nto-qnx/x86 /usr/aarch64-unknown-nto-qnx/x86_64 && \
    rm -rf /qnx && \
    rm /usr/bin/python && \
    ln -s /usr/bin/python3 /usr/bin/python

ENV QNX_HOST=/
ENV QNX_TARGET=/usr/aarch64-unknown-nto-qnx

ENV REPO_DEBS="cuda-qnx-cross.deb"

ENV CUDA_CROSS_VERSION=10-0

ENV CUDA_CROSS_PACKAGES="cublas cudart cufft curand cusolver cusparse driver misc-headers npp"

RUN dpkg -i $REPO_DEBS && \
    echo "for i in \$CUDA_CROSS_PACKAGES; do echo \"cuda-\$i-cross-qnx-\${CUDA_CROSS_VERSION}\";done" | bash > /tmp/cuda-packages.txt && \
    apt-get update \
   && apt-get install -y $(cat /tmp/cuda-packages.txt) \
   && rm -rf /var/lib/apt/lists/* \
   && rm -rf /tmp/cuda-packages.txt

ENV PKG_CONFIG_PATH=/usr/aarch64-unknown-nto-qnx/aarch64le/lib/pkgconfig

COPY DALI_DEPS_VERSION /tmp

ARG DALI_DEPS_REPO
ENV DALI_DEPS_REPO=${DALI_DEPS_REPO:-https://github.com/NVIDIA/DALI_deps}

ARG DALI_DEPS_VERSION_SHA
ENV DALI_DEPS_VERSION_SHA=${DALI_DEPS_VERSION_SHA}

# run in /bin/bash to have more advanced features supported like list
RUN /bin/bash -c 'DALI_DEPS_VERSION_SHA=${DALI_DEPS_VERSION_SHA:-$(cat /tmp/DALI_DEPS_VERSION)}    && \
    git clone ${DALI_DEPS_REPO} /tmp/dali_deps                                                     && \
    cd /tmp/dali_deps                                                                              && \
    git checkout ${DALI_DEPS_VERSION_SHA}                                                          && \
    git submodule init                                                                             && \
    git submodule update --depth 1 --init --recursive                                              && \
    export CC_COMP=aarch64-unknown-nto-qnx7.0.0-gcc                                                && \
    export CXX_COMP=aarch64-unknown-nto-qnx7.0.0-g++                                               && \
    export INSTALL_PREFIX="/usr/aarch64-unknown-nto-qnx/aarch64le"                                 && \
    export SYSROOT_ARG="--with-sysroot=${QNX_TARGET}"                                              && \
    export BUILD_ARCH_OPTION="--build=x86_64-linux-gnu "                                           && \
    export HOST_ARCH_OPTION="--host=aarch64-unknown-nto-qnx7.0.0"                                  && \
    export CMAKE_TARGET_ARCH=aarch64                                                               && \
    export OPENCV_TOOLCHAIN_FILE="qnx/aarch64-qnx.toolchain.cmake"                                 && \
    export WITH_FFMPEG=0                                                                           && \
    export EXTRA_PROTOBUF_FLAGS="-D__EXT_POSIX1_198808 -I$QNX_TARGET/usr/include \
                                 -I$QNX_TARGET/usr/include/aarch64 \
                                 -I$QNX_TARGET/usr/include/c++/v1 \
                                 -L$QNX_TARGET/aarch64le/lib \
                                 -D_POSIX_C_SOURCE=200112L \
                                 -D_QNX_SOURCE \
                                 -D_FILE_OFFSET_BITS=64"                                           && \
    export EXTRA_FLAC_FLAGS="-D__DJGPP__"                                                          && \
    export EXTRA_LIBSND_FLAGS="-I/usr/aarch64-unknown-nto-qnx/aarch64le/include"                   && \
    /tmp/dali_deps/build_scripts/build_deps.sh && rm -rf /tmp/dali_deps && rm -rf /tmp/DALI_DEPS_VERSION'

VOLUME /dali

WORKDIR /dali

ENV PATH=/usr/local/cuda-10.0/bin:$PATH

ARG DALI_BUILD_DIR=build_aarch64_qnx

WORKDIR /dali/${DALI_BUILD_DIR}

CMD cmake                \
  -DWERROR=ON            \
  -DCMAKE_TOOLCHAIN_FILE:STRING="$PWD/../platforms/qnx/aarch64-qnx.toolchain.cmake" \
  -DCMAKE_COLOR_MAKEFILE=ON        \
  -DCMAKE_INSTALL_PREFIX=./install \
  -DARCH=aarch64-qnx               \
  -DCMAKE_CUDA_COMPILER=/usr/local/cuda-10.0/bin/nvcc    \
  -DCUDA_HOST=/usr/local/cuda-10.0                       \
  -DCUDA_TARGET=/usr/local/cuda-10.0/targets/aarch64-qnx \
  -DBUILD_TEST=ON        \
  -DBUILD_BENCHMARK=OFF  \
  -DBUILD_NVTX=OFF       \
  -DBUILD_PYTHON=OFF     \
  -DBUILD_LMDB=ON        \
  -DBUILD_TENSORFLOW=OFF \
  -DBUILD_JPEG_TURBO=ON  \
  -DBUILD_LIBTIFF=ON     \
  -DBUILD_LIBSND=ON      \
  -DBUILD_FFTS=ON        \
  -DBUILD_CFITSIO=ON     \
  -DBUILD_NVCOMP=OFF     \
  -DBUILD_NVJPEG=OFF     \
  -DBUILD_NVJPEG2K=OFF   \
  -DBUILD_NVOF=OFF       \
  -DBUILD_NVDEC=OFF      \
  -DBUILD_NVML=OFF       \
  -DBUILD_CUFILE=OFF     \
  -DVERBOSE_LOGS=OFF     \
  -DWITH_DYNAMIC_CUDA_TOOLKIT=ON\
  -DWITH_DYNAMIC_NVJPEG=ON\
  -DWITH_DYNAMIC_CUFFT=ON\
  -DWITH_DYNAMIC_NPP=ON  \
  .. &&                  \
  make install -j"$(grep ^processor /proc/cpuinfo | wc -l)"
