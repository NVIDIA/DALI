#########################################################################################
##  Stage 1: build DALI dependencies
##     DALI is based on "manylinux3", which is our modification of manylinux1
##     (CentOS 5 derivative). For building this docker image, manylinux3 has to
##     be manually built. It is also possible to use other distros, but we don't
##     officially support them.
##     For instructions, how to build manylinux3 with our patch see:
##     //DALI/docker/build.sh#L16
#########################################################################################
ARG FROM_IMAGE_NAME
ARG CUDA_IMAGE
FROM ${CUDA_IMAGE} as cuda
FROM ${FROM_IMAGE_NAME}

# Install yum Dependencies
RUN yum install -y zip wget yasm doxygen graphviz zlib-devel

# Don't want the short-unicode version for Python 2.7
RUN rm -f /opt/python/cp27-cp27m

# Boost
RUN BOOST_VERSION=1.66.0 && \
    cd /usr/local && \
    curl -L https://dl.bintray.com/boostorg/release/1.66.0/source/boost_${BOOST_VERSION//./_}.tar.gz | tar -xzf - && \
    ln -s ../boost_${BOOST_VERSION//./_}/boost include/boost

# CMake
RUN CMAKE_VERSION=3.11 && \
    CMAKE_BUILD=3.11.0 && \
    curl -L https://cmake.org/files/v${CMAKE_VERSION}/cmake-${CMAKE_BUILD}.tar.gz | tar -xzf - && \
    cd /cmake-${CMAKE_BUILD} && \
    ./bootstrap --parallel=$(grep ^processor /proc/cpuinfo | wc -l) && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install && \
    rm -rf /cmake-${CMAKE_BUILD}

# protobuf v3.11.1
RUN PROTOBUF_VERSION=3.11.1 && \
    curl -L https://github.com/google/protobuf/releases/download/v${PROTOBUF_VERSION}/protobuf-all-${PROTOBUF_VERSION}.tar.gz | tar -xzf - && \
    cd /protobuf-${PROTOBUF_VERSION} && \
    ./autogen.sh && \
    ./configure CXXFLAGS="-fPIC" --prefix=/usr/local --disable-shared 2>&1 > /dev/null && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install 2>&1 > /dev/null && \
    rm -rf /protobuf-${PROTOBUF_VERSION}

# LMDB
COPY docker/Makefile-lmdb.patch /tmp
RUN LMDB_VERSION=0.9.22 && \
    git clone -b LMDB_${LMDB_VERSION} --single-branch https://github.com/LMDB/lmdb && \
    cd /lmdb/libraries/liblmdb && \
    patch -p3 < /tmp/Makefile-lmdb.patch && \
    rm -f /tmp/Makefile-lmdb.patch && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install && \
    rm -rf /lmdb

# libjpeg-turbo
RUN JPEG_TURBO_VERSION=2.0.2 && \
    curl -L https://github.com/libjpeg-turbo/libjpeg-turbo/archive/${JPEG_TURBO_VERSION}.tar.gz | tar -xzf - && \
    cd libjpeg-turbo-${JPEG_TURBO_VERSION} && \
    cmake -G"Unix Makefiles" -DENABLE_SHARED=TRUE -DCMAKE_INSTALL_PREFIX=/usr/local . 2>&1 >/dev/null && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install 2>&1 >/dev/null && \
    rm -rf /libjpeg-turbo-${JPEG_TURBO_VERSION}

# libtiff
# Note: libtiff should be built with support for zlib. If running this step alone on a custom
#       system, zlib should be installed first
RUN LIBTIFF_VERSION=4.0.10 && \
    cd /tmp && \
    curl -L http://download.osgeo.org/libtiff/tiff-${LIBTIFF_VERSION}.tar.gz | tar -xzf - && \
    cd tiff-${LIBTIFF_VERSION} && \
    ./autogen.sh && \
    ./configure --prefix=/usr/local && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && \
    make install && \
    cd && \
    rm -rf /tmp/tiff-${LIBTIFF_VERSION}

# OpenCV
RUN OPENCV_VERSION=3.4.3 && \
    curl -L https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz | tar -xzf - && \
    cd /opencv-${OPENCV_VERSION} && mkdir build && cd build && \
    cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DBUILD_SHARED_LIBS=OFF \
          -DWITH_CUDA=OFF -DWITH_1394=OFF -DWITH_IPP=OFF -DWITH_OPENCL=OFF -DWITH_GTK=OFF \
          -DBUILD_JPEG=OFF -DWITH_JPEG=ON \
          -DBUILD_TIFF=OFF -DWITH_TIFF=ON \
          -DBUILD_DOCS=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_PNG=ON \
          -DBUILD_opencv_cudalegacy=OFF -DBUILD_opencv_stitching=OFF \
          -DWITH_TBB=OFF -DWITH_OPENMP=OFF -DWITH_PTHREADS_PF=OFF -DWITH_CSTRIPES=OFF .. && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install && \
    rm -rf /opencv-${OPENCV_VERSION}

# Clang
RUN CLANG_VERSION=6.0.1 && \
    cd /usr/local && \
    wget http://releases.llvm.org/${CLANG_VERSION}/clang+llvm-${CLANG_VERSION}-x86_64-linux-sles11.3.tar.xz && \
    tar -xJf clang+llvm-${CLANG_VERSION}-x86_64-linux-sles11.3.tar.xz --strip 1 && \
    rm clang+llvm-${CLANG_VERSION}-x86_64-linux-sles11.3.tar.xz

ENV NVIDIA_DRIVER_CAPABILITIES=video,compute,utility

# FFmpeg
RUN FFMPEG_VERSION=4.2.1 && \
    cd /tmp && wget https://developer.download.nvidia.com/compute/redist/nvidia-dali/ffmpeg-${FFMPEG_VERSION}.tar.bz2 && \
    tar xf ffmpeg-$FFMPEG_VERSION.tar.bz2 && \
    rm ffmpeg-$FFMPEG_VERSION.tar.bz2 && \
    cd ffmpeg-$FFMPEG_VERSION && \
    ./configure \
      --prefix=/usr/local \
      --disable-static \
      --disable-all \
      --disable-autodetect \
      --disable-iconv \
      --enable-shared \
      --enable-avformat \
      --enable-avcodec \
      --enable-avfilter \
      --enable-protocol=file \
      --enable-demuxer=mov,matroska,avi  \
      --enable-bsf=h264_mp4toannexb,hevc_mp4toannexb,mpeg4_unpack_bframes && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && make install && \
    cd /tmp && rm -rf ffmpeg-$FFMPEG_VERSION

# flac
RUN FLAC_VERSION=1.3.3 && cd /tmp                                                    && \
    wget https://ftp.osuosl.org/pub/xiph/releases/flac/flac-${FLAC_VERSION}.tar.xz   && \
    tar -xf flac-$FLAC_VERSION.tar.xz                                                && \
    rm flac-$FLAC_VERSION.tar.xz                                                     && \
    cd flac-$FLAC_VERSION                                                            && \
    ./configure && make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && make install && \
    cd /tmp && rm -rf flac-$FLAC_VERSION

# libogg
RUN OGG_VERSION=1.3.4 && cd /tmp                                                     && \
    wget http://downloads.xiph.org/releases/ogg/libogg-${OGG_VERSION}.tar.gz         && \
    tar -xf libogg-$OGG_VERSION.tar.gz                                               && \
    rm libogg-$OGG_VERSION.tar.gz                                                    && \
    cd libogg-$OGG_VERSION                                                           && \
    ./configure && make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && make install && \
    cd /tmp && rm -rf libogg-$OGG_VERSION

# libvorbis
# Install after libogg
RUN VORBIS_VERSION=1.3.6 && cd /tmp                                                   && \
    wget http://downloads.xiph.org/releases/vorbis/libvorbis-${VORBIS_VERSION}.tar.xz && \
    tar -xf libvorbis-$VORBIS_VERSION.tar.xz                                          && \
    rm libvorbis-$VORBIS_VERSION.tar.xz                                               && \
    cd libvorbis-$VORBIS_VERSION                                                      && \
    ./configure && make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && make install  && \
    cd /tmp && rm -rf libvorbis-$VORBIS_VERSION

# libsnd
RUN LIBSND_VERSION=1.0.28 && cd /tmp                                                                           && \
    wget https://developer.download.nvidia.com/compute/redist/nvidia-dali/libsndfile-${LIBSND_VERSION}.tar.gz  && \
    tar -xf libsndfile-$LIBSND_VERSION.tar.gz                                                                  && \
    rm libsndfile-$LIBSND_VERSION.tar.gz                                                                       && \
    cd libsndfile-$LIBSND_VERSION                                                                              && \
    ./configure && make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && make install                           && \
    cd /tmp && rm -rf libsnd-$LIBSND_VERSION

# CUDA
COPY --from=cuda /usr/local/cuda /usr/local/cuda
