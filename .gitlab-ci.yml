######################################################
## Variables used by the test runs
######################################################

variables:
    EXTRA_DOCKER_RUN_ARGS: "--shm-size=1G --ulimit memlock=-1 --ulimit stack=$$((1024*65536))"
    DATADIR: /raid/dldata

    # the following will be overridden by jobs of the pipeline that actually need to check out the sources
    GIT_STRATEGY: none
    GIT_SUBMODULE_STRATEGY: none

######################################################
## Build steps.
##    DO NOT MODIFY THIS SECTION
######################################################

stages:
    - build base
    - build devel
    - trigger
    - test
    - staging

before_script:
    - echo "${CI_BUILD_NAME}" | grep -Eq "(^|-)py2($|-)" && export PYVER=2.7 || export PYVER=3.5   && echo "${PYVER}"
    - export NV_DOCKER_ARGS="curl -s http://localhost:3476/docker/cli?dev=${RUNNER_GPUS//,/+}"     && echo "${NV_DOCKER_ARGS}"
    - export RELEASE_BRANCH_NAME=${CI_COMMIT_REF_NAME%%-devel}                                     && echo "${RELEASE_BRANCH_NAME}"
    - export IMAGE_NAME_PREFIX="${CI_REGISTRY_IMAGE}:${RELEASE_BRANCH_NAME}"                       && echo "${IMAGE_NAME_PREFIX}"
    - export BASE_IMAGE_NAME="${IMAGE_NAME_PREFIX}-py${PYVER}-base"                             && echo "${BASE_IMAGE_NAME}"
    - export BASE_IMAGE_NAME_VERSIONED="${BASE_IMAGE_NAME%%-base}.${CI_PIPELINE_ID}"               && echo "${BASE_IMAGE_NAME_VERSIONED}"
    - export DEVEL_IMAGE_NAME="${IMAGE_NAME_PREFIX}-py${PYVER}-devel"                           && echo "${DEVEL_IMAGE_NAME}"
    - export DEVEL_IMAGE_NAME_VERSIONED="${BASE_IMAGE_NAME_VERSIONED}-devel"                       && echo "${DEVEL_IMAGE_NAME_VERSIONED}"
    - export ORIGIN1="${CI_REPOSITORY_URL##*@}"
    - export ORIGIN_SSH=git@${ORIGIN1/\//:}                                                        && echo "${ORIGIN_SSH}"
    - export ORIGIN_HTTPS=https://${ORIGIN1}                                                       && echo "${ORIGIN_HTTPS}"
    - docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"

.base_template : &BASE
    variables:
      GIT_STRATEGY: fetch
      GIT_SUBMODULE_STRATEGY: recursive
      GET_SOURCES_ATTEMPTS: 3
    script:
    - export BASE_IMAGE_NAME="${IMAGE_NAME_PREFIX}-py${PYVER}-base"
    - export BASE_IMAGE_NAME_VERSIONED="${BASE_IMAGE_NAME%-base}.${CI_PIPELINE_ID}"
    - echo -e "Dockerfile*\n"
              ".git*\n"
              ".dockerignore\n"
              "qa" > .dockerignore
    - docker pull "${BASE_IMAGE_NAME}" || true
    - docker build --pull
                   --cache-from "${BASE_IMAGE_NAME}"
                   -t "${BASE_IMAGE_NAME}" -t "${BASE_IMAGE_NAME_VERSIONED}"
                   --build-arg "NVIDIA_BUILD_REF=${CI_COMMIT_SHA}"
                   --build-arg "NVIDIA_BUILD_ID=${CI_JOB_ID}"
                   --build-arg "PYVER=${PYVER}" .
    - docker push "${BASE_IMAGE_NAME}"
    - docker push "${BASE_IMAGE_NAME_VERSIONED}"
    except:
    - tags

py2-ndll-base:
    stage: build base
    <<: *BASE

py3-ndll-base:
    stage: build base
    <<: *BASE


.devel_template : &DEVEL
    stage: build devel
    variables:
      GIT_STRATEGY: fetch
      GIT_SUBMODULE_STRATEGY: recursive
      GET_SOURCES_ATTEMPTS: 3
    script:
    - echo -e "FROM ${BASE_IMAGE_NAME_VERSIONED}\n"
              "COPY Dockerfile* /opt/${CI_PROJECT_NAME}/\n"
              "COPY .gitignore /opt/${CI_PROJECT_NAME}/\n"
              "COPY .gitmodules /opt/${CI_PROJECT_NAME}/\n"
              "COPY .gitlab-ci.yml /opt/${CI_PROJECT_NAME}/\n"
              "COPY .git/ /opt/${CI_PROJECT_NAME}/.git/\n"
              "COPY qa/   /opt/${CI_PROJECT_NAME}/qa/\n"
        > Dockerfile.${CI_PROJECT_NAME}.${CI_COMMIT_REF_NAME}
    - git remote set-url origin ${ORIGIN_HTTPS}
    - docker build --pull -t "${DEVEL_IMAGE_NAME}" -t "${DEVEL_IMAGE_NAME_VERSIONED}"
                   -f Dockerfile.${CI_PROJECT_NAME}.${CI_COMMIT_REF_NAME} .
    - docker push "${DEVEL_IMAGE_NAME}"
    - docker push "${DEVEL_IMAGE_NAME_VERSIONED}"
    except:
    - tags

py2-ndll:
  stage: build devel
  <<: *DEVEL

py3-ndll:
  stage: build devel
  <<: *DEVEL

.stage_template : &STAGE
    stage: staging
    environment: staging
    variables:
      GIT_STRATEGY: fetch
      GIT_SUBMODULE_STRATEGY: recursive
      GET_SOURCES_ATTEMPTS: 3
    script:
    - export STAGE_IMAGE_NAME="${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME/%-devel/-stage}"          && echo "${STAGE_IMAGE_NAME}"
    - export QA_IMAGE_NAME="${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME/%-devel/-qa}"                && echo "${QA_IMAGE_NAME}"
    # push a xx.yy-stage tag that records the commit we staged from
    - git remote set-url origin ${ORIGIN_SSH}
    - git push --delete origin refs/tags/${CI_COMMIT_REF_NAME/%-devel/-stage}
    - git push origin HEAD:refs/tags/${CI_COMMIT_REF_NAME/%-devel/-stage}
    # create xx.yy-stage image
    - docker pull "${BASE_IMAGE_NAME_VERSIONED}"
    - docker tag "${BASE_IMAGE_NAME_VERSIONED}" "${STAGE_IMAGE_NAME}"
    - docker push "${STAGE_IMAGE_NAME}"
    # create xx.yy-qa image on top of -stage that adds the qa/* tests back in
    - echo -e "FROM ${STAGE_IMAGE_NAME}\n"
              "COPY qa/   /opt/${CI_PROJECT_NAME}/qa/\n"
        > Dockerfile.${CI_PROJECT_NAME}.${CI_COMMIT_REF_NAME/%-devel/-qa}
    - docker build --pull -t "${QA_IMAGE_NAME}" -f Dockerfile.${CI_PROJECT_NAME}.${CI_COMMIT_REF_NAME/%-devel/-qa} .
    - docker push "${QA_IMAGE_NAME}"
    only:
    - /^.*-devel$/
    except:
    - tags
    when: manual

ndll-stage:
  stage: staging
  <<: *STAGE

ndll-stage:
  stage: staging
  <<: *STAGE

.test_template: &TEST_TEMPLATE
    environment: "${CI_JOB_NAME}"
    variables:
      TEST_WORK_DIR: "/opt/ndll/qa/${CI_JOB_NAME}/"
      TEST_SCRIPT: "./test.sh"
    script:
    - export TEST_WORK_DIR="${TEST_WORK_DIR%%--*}"
    - export TEST_WORK_DIR="${TEST_WORK_DIR%-py[23]}"
    - cat /proc/driver/nvidia/version
    - set -x &&
      docker run --rm $(eval ${NV_DOCKER_ARGS})
             -v $DATADIR:/data
             $(eval echo ${EXTRA_DOCKER_RUN_ARGS})
             ${DEVEL_IMAGE_NAME_VERSIONED}
             /bin/bash -c "nvidia-smi && cd ${TEST_WORK_DIR} && exec bash -ex ${TEST_SCRIPT}"
    tags:
    - must_specify_runner
    except:
    - tags
    allow_failure: false

.manual_test_trigger: &MANUAL_TEST_TRIGGER
    stage: trigger
    script:
    - export SCOPE1=${CI_JOB_NAME%% tests}; export SCOPE=${SCOPE1##Run all }
    - docker pull ${CI_REGISTRY}/devops/scripts:nvdl_nightly_test_scheduler
    - docker run --rm ${CI_REGISTRY}/devops/scripts:nvdl_nightly_test_scheduler ${CI_PIPELINE_ID} ${CI_PROJECT_PATH} ${SCOPE}
    except:
    - tags
    when: manual

.L0_test: &L0_TEST
    stage: test
    <<: *TEST_TEMPLATE

.P100_R384_4GPU: &P100_R384_4GPU
    tags:
    - P100
    - R384
    - 4GPU

.V100_R384_4GPU: &V100_R384_4GPU
    tags:
    - V100
    - R384
    - 4GPU

.1080Ti_R384_1GPU: &1080Ti_R384_1GPU
    tags:
    - 1080Ti
    - R384
    - 1GPU
    only:
    - /^.*-devel$/

.TitanXP_R384_2GPU: &TitanXP_R384_2GPU
    tags:
    - TitanXP
    - R384
    - 2GPU
    only:
    - /^.*-devel$/

.M60_R384_2GPU: &M60_R384_2GPU
    tags:
    - M60
    - R384
    - 2GPU
    only:
    - /^.*-devel$/

.K80_R384_2GPU: &K80_R384_2GPU
    tags:
    - K80
    - R384
    - 2GPU
    only:
    - /^.*-devel$/

.P40_R384_1GPU: &P40_R384_1GPU
    tags:
    - P40
    - R384
    - 1GPU
    only:
    - /^.*-devel$/

.M40_R384_1GPU: &M40_R384_1GPU
    tags:
    - M40
    - R384
    - 1GPU
    only:
    - /^.*-devel$/

######################################################
##
## Test definitions.
##
##   By convention, test names should be prefixed
##   with "L0_" or "L1_" etc.
##
##   Normally qa/ will be a submodule that pulls in
##   all of the stuff needed to run the tests into the
##   *-devel images.
##
##   The CI script templates above expect each test to
##   be defined in /opt/<project>/qa/<testname>/test.sh.
##   This behavior is specified by the variables
##   $TEST_WORK_DIR and $TEST_SCRIPT.  You can override
##   either of those variables for a given test, but if
##   you do, you have to override them both together,
##   like this:
##
##   L0_mytest:
##      <<: *L0_TEST
##      variables:
##        TEST_WORK_DIR: "/some/other/path"
##        TEST_SCRIPT: "./test.sh"
##
######################################################

L0_lint--py2--P100_R384_4GPU:
  <<: *L0_TEST
  <<: *P100_R384_4GPU

L0_self-test--P100_R384_4GPU:
  <<: *L0_TEST
  <<: *P100_R384_4GPU

L0_rn50-benchmarks--P100_R384_4GPU:
  <<: *L0_TEST
  <<: *P100_R384_4GPU

L0_rn50_python-benchmarks--P100_R384_4GPU:
  <<: *L0_TEST
  <<: *P100_R384_4GPU

L0_rn50_python-benchmarks--py2--P100_R384_4GPU:
  <<: *L0_TEST
  <<: *P100_R384_4GPU

L0_self-test--V100_R384_4GPU:
  <<: *L0_TEST
  <<: *V100_R384_4GPU

L0_rn50-benchmarks--V100_R384_4GPU:
  <<: *L0_TEST
  <<: *V100_R384_4GPU

L0_rn50_python-benchmarks--V100_R384_4GPU:
  <<: *L0_TEST
  <<: *V100_R384_4GPU

L0_rn50_python-benchmarks--py2--V100_R384_4GPU:
  <<: *L0_TEST
  <<: *V100_R384_4GPU

L0_jupyter--py2--P100_R384_4GPU:
  <<: *L0_TEST
  <<: *P100_R384_4GPU

L0_jupyter--py2--V100_R384_4GPU:
  <<: *L0_TEST
  <<: *V100_R384_4GPU
